parameters:
- name: sourceDirectory
  type: string

- name: botName
  displayName: Bot name
  type: string

- name: luisAuthoringKey
  displayName: LUIS authoring key
  type: string

- name: luisAuthoringRegion
  displayName: LUIS authoring region
  type: string

- name: qnaSubscriptionKey
  displayName: QnA Maker subscription key
  type: string

steps:
# Cross train LU models (LUIS and QnA)
- task: PowerShell@2
  displayName: 'Cross train LUIS and QnA'
  inputs:
    targetType: 'inline'
    script: |
      $sourceDirectory = "${{ parameters.sourceDirectory }}"
      $outputDirectory = "${{ parameters.sourceDirectory }}/generated/interruption"

      # Create output directory
      New-Item -Path /. -name $outputDirectory -ItemType "directory"
      
      # Cross train
      bf luis:cross-train --in $sourceDirectory --out $outputDirectory --config $sourceDirectory/settings/cross-train.config.json --force

      # List generated files
      cd $outputDirectory
      ls -R

# Publish LUIS models
- task: PowerShell@2
  displayName: 'Publish LUIS'
  inputs:
    targetType: 'inline'
    script: |
      $sourceDirectory = "${{ parameters.sourceDirectory }}/generated/interruption"
      $outputDirectory = "${{ parameters.sourceDirectory }}/generated"

      # Build, train and publish the LUIS models
      bf luis:build --in $sourceDirectory --out $outputDirectory --authoringKey ${{ parameters.luisAuthoringKey }} --botName ${{ parameters.botName }} --suffix composer --force --log
      
      # Workaround remove version element from LUIS settings file
      $luisSettingsFile = "$outputDirectory/luis.settings.composer.${{ parameters.luisAuthoringRegion }}.json"
      Set-Content -Path $luisSettingsFile -Value (get-content -Path $luisSettingsFile | Select-String -Pattern '"version":' -NotMatch)

      # Output the generated settings
      Get-Content $luisSettingsFile

# Publish QnA Maker KB
- task: PowerShell@2
  displayName: 'Publish QnA'
  inputs:
    targetType: 'inline'
    script: |
      $sourceDirectory = "${{ parameters.sourceDirectory }}/generated/interruption"
      $outputDirectory = "${{ parameters.sourceDirectory }}/generated"
      
      bf qnamaker:build --in $sourceDirectory --out $outputDirectory --subscriptionKey ${{ parameters.qnaSubscriptionKey }} --botName ${{ parameters.botName }} --suffix composer --force --log

# Publish output artifacts to Azure DevOps
- task: PublishBuildArtifacts@1
  displayName: 'Publish generated artifacts'
  inputs:
    pathtoPublish: '${{ parameters.sourceDirectory }}/generated' 
    artifactName: 'BuildArtifacts-$(Build.BuildId)'